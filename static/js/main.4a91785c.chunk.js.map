{"version":3,"sources":["Chart.js","App.js","index.js"],"names":["Chart","props","width","height","data","interpolation","domain","y","fixLabelOverlap","tickFormat","t","Date","toLocaleDateString","style","tickLabels","fontSize","dependentAxis","App","useState","bpi","setBpi","setError","startDate","setStartDate","endDate","setEndDate","fetchData","a","start","end","url","URL","searchParams","set","fetch","toString","response","json","useEffect","then","Object","keys","map","key","x","catch","error","className","value","onChange","e","target","type","min","max","href","ReactDOM","render","document","getElementById"],"mappings":"yRAEe,SAASA,EAAMC,GAC1B,OACI,eAAC,IAAD,CACIC,MAAO,IACPC,OAAQ,IAFZ,UAII,cAAC,IAAD,CACIC,KAAMH,EAAMG,KACZC,cAAc,UACdC,OAAQ,CAACC,EAAG,CAAC,KAAO,SAGxB,cAAC,IAAD,CACIC,iBAAiB,EACjBC,WAAY,SAACC,GAAD,OAAO,IAAIC,KAAKD,GAAGE,sBAC/BC,MAAO,CACHC,WAAY,CAACC,SAAU,OAG/B,cAAC,IAAD,CACIC,eAAa,EACbH,MAAO,CACHC,WAAY,CAACC,SAAU,U,OCmC5BE,MAtDf,WAAgB,IAAD,EAESC,mBAAS,MAFlB,mBAENC,EAFM,KAEDC,EAFC,OAGaF,mBAAS,MAHtB,mBAGCG,GAHD,aAKqBH,mBAAS,IAL9B,mBAKNI,EALM,KAKKC,EALL,OAMiBL,mBAAS,IAN1B,mBAMNM,EANM,KAMGC,EANH,KASPC,EAAS,uCAAG,gDAAAC,EAAA,6DAAOC,EAAP,+BAAa,KAAMC,EAAnB,+BAAuB,KACjCC,EAAM,IAAIC,IAAI,yDACpBH,GAASE,EAAIE,aAAaC,IAAI,QAASL,GACvCC,GAAOC,EAAIE,aAAaC,IAAI,MAAOJ,GAHnB,SAIOK,MAAMJ,EAAIK,YAJjB,cAIVC,EAJU,iBAKGA,EAASC,OALZ,eAKVjC,EALU,yBAMTA,GANS,4CAAH,qDAmBf,OATAkC,qBAAU,WACRZ,EAAUJ,EAAWE,GAClBe,MAAK,SAAAnC,GACJ,IAAMe,EAAMqB,OAAOC,KAAKrC,EAAKe,KAAKuB,KAAI,SAAAC,GAAG,MAAK,CAAEC,EAAGD,EAAKpC,EAAGH,EAAKe,IAAIwB,OACpEvB,EAAOD,MAER0B,OAAM,SAAAC,GAAK,OAAIzB,EAASyB,QAC1B,CAACxB,EAAWE,IAGb,sBAAKuB,UAAU,MAAf,UACE,iCACE,mDACC5B,GAAO,cAACnB,EAAD,CAAOI,KAAMe,IAErB,sBAAK4B,UAAU,cAAf,UACE,4CACS,uBAAOC,MAAO1B,EAAW2B,SAAU,SAAAC,GAAC,OAAI3B,EAAa2B,EAAEC,OAAOH,QAAQI,KAAK,OAAOC,IAAI,kBAG/F,0CACO,uBAAOL,MAAOxB,EAASyB,SAAU,SAAAC,GAAC,OAAIzB,EAAWyB,EAAEC,OAAOH,QAAQI,KAAK,OAAOE,IAAI,wBAO7F,iCACE,mBAAGC,KAAM,yCAAT,uCChDRC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4a91785c.chunk.js","sourcesContent":["import {VictoryChart, VictoryAxis, VictoryLine} from 'victory';\n\nexport default function Chart(props) {\n    return (\n        <VictoryChart \n            width={640} \n            height={440}\n        >\n            <VictoryLine \n                data={props.data} \n                interpolation=\"natural\"\n                domain={{y: [58000, 68000]}}\n            />\n\n            <VictoryAxis \n                fixLabelOverlap={true} \n                tickFormat={(t) => new Date(t).toLocaleDateString()}     \n                style={{\n                    tickLabels: {fontSize: 10}\n                }}\n            />\n            <VictoryAxis \n                dependentAxis \n                style={{\n                    tickLabels: {fontSize: 10}\n                }}\n            />\n        </VictoryChart>\n    );\n}\n","import {useState, useEffect} from 'react';\nimport Chart from './Chart';\n\nimport './App.css';\n\nfunction App() {\n\n  const [bpi, setBpi] = useState(null);\n  const [error, setError] = useState(null);\n\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n\n  // Get the data from the Coinbase API\n  const fetchData = async (start=null, end=null) => {\n    const url = new URL('https://api.coindesk.com/v1/bpi/historical/close.json');\n    start && url.searchParams.set('start', start);\n    end && url.searchParams.set('end', end);\n    const response = await fetch(url.toString());\n    const data = await response.json();\n    return data;\n  }\n\n  // When the component mounts, fetch the data\n  useEffect(() => {\n    fetchData(startDate, endDate)\n      .then(data => {\n        const bpi = Object.keys(data.bpi).map(key => ({ x: key, y: data.bpi[key] }));\n        setBpi(bpi);\n      })\n      .catch(error => setError(error))\n  }, [startDate, endDate]);\n\n  return (\n    <div className=\"App\">\n      <main>\n        <h6>BTC Price History</h6>\n        {bpi && <Chart data={bpi} />}\n\n        <div className=\"date-inputs\">\n          <label>\n            Start: <input value={startDate} onChange={e => setStartDate(e.target.value)} type=\"date\" min=\"2021-10-15\" />\n          </label>\n\n          <label>\n            End: <input value={endDate} onChange={e => setEndDate(e.target.value)} type=\"date\" max=\"2021-11-15\" />\n          </label>\n        </div>\n\n\n      </main>\n\n      <footer>\n        <a href={\"https://old.coindesk.com/price/bitcoin\"}>Powered by CoinDesk</a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}